
Please note:
	* Read the questions carefully. Every word is important.
	* Feel free to add comments in your answers and read the documentation as you see fit.
	* Don't forget to mention the language you are using.
	* Do test your code!
	* Between parenthesis is the weight of each question, the maximum score is 20


Test 1: Any language (3/20)
Write a program that outputs sequentially the integers from 1 to 99, but on some conditions prints a string instead:
	* when the integer is a multiple of 3 print “Open” instead of the number,
	* when it is a multiple of 7 print “Source” instead of the number,
	* when it is a multiple of both 3 and 7 print “OpenSource” instead of the number.

// Javascript

for (i = 1; i < 100; i++) {
  if (i % 21 === 0) console.log("OpenSource");
  else if (i % 3 === 0) console.log("Open");
  else if (i % 7 === 0) console.log("Source");
  else console.log(i);
}

Test 2: Any language (3/20)
Solve the game "Guess a number", find a secret integer between 1 and 1000000
in less than 50 guesses. Write a function that solves the game without user input and returns the
solution by using the function verify() which is defined with the following
specification:
function verify(guess: integer) -> integer
Argument:
     guess (integer) the number to verify
Returns:
     0 if the guess is the solution, your program won
     -1 if the solution is smaller than the guess parameter
     1  if the solution is bigger than the guess parameter

Warning: You are not allowed to call verify() more that 50 times or you lose.

// Javascript

let highest = 1000000;
let lowest = 0;
let random = randomInt(1, 1000000);

console.log(`The number to have : ${random}`);
findNumber(random);

function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function verify(guess) {
  if (guess === random) {
    return 0;
  } else if (guess > random) {
    return 1;
  } else {
    return -1;
  }
}

function findNumber(random) {
  for (i = 0; i <= 51; i++) {
    if (i >= 51) {
      console.log(`Game Over, the number to guess is ${random} `);
    } else {
      console.log(`Number of try : ${i}`);
      // Here I made some choices for this test, you didn't precise if the guess number is a random number or not so I decide to make 2 guess.
      // The first is a guess who start to 500000
      // The second is a random number
      // Make your choice
      let guess = parseInt((lowest + highest) / 2);
      //   let guess = randomInt(1, 1000000);
      console.log(`My guess is : ${guess}`);
      let state = verify(guess);
      if (state == 1) {
        highest = guess;
      } else if (state == -1) {
        lowest = guess;
      } else {
        console.log(`I've won, it was : ${guess}`);
        break;
      }
    }
  }
}

Test 3: Any language (3/20)
Write a function that takes a list of strings and returns the sum of the list items that represent an integer (skipping the other items)

// Javascript

let liststring = ["67", "tank", "43", "thirty", "odoo", "12"];
let sum = 0;

function sumList(array) {
  array.map(function (x) {
    if (isFinite(x)) {
      sum += parseInt(x, 10);
    }
  });
  console.log(sum);
}

sumList(liststring);

Test 4: Any language (1/20)
Write a recursive version of the previous function (or an iterative version if you have already done a recursive version).

// Javascript

let liststring = ["67", "tank", "43", "thirty", "odoo", "12"];
let sum = 0;

function sumList(array) {
  array.forEach(function (x) {
    if (isFinite(x)) {
      sum += parseInt(x, 10);
    }
  });
  console.log(sum);
}

sumList(liststring);

Test 5: SQL (3/20)
	* Write pseudo-SQL statements to create database tables to store the products of a basic webshop. Each product has a name, a price, a creation date and may belong to several categories. Categories have a name and a flag to indicate whether the category is private or public.
	* Write a SQL query to find the list of products that belong to more than 5 public categories.

USE master
GO
IF NOT EXISTS (
    SELECT name
        FROM sys.databases
        WHERE name = N'TestOdoo'
)
CREATE DATABASE TestOdoo
GO

IF OBJECT_ID('products', 'U') IS NOT NULL
DROP TABLE products
GO
CREATE TABLE products
(
    productsId INT NOT NULL PRIMARY KEY IDENTITY,
    name [NVARCHAR](50) NOT NULL,
    price [FLOAT] NOT NULL,
    creationDate [DATE] NOT NULL
);
GO

IF OBJECT_ID('categories', 'U') IS NOT NULL
DROP TABLE categories
GO
CREATE TABLE categories
(
    categoriesId INT NOT NULL PRIMARY KEY IDENTITY,
    name [NVARCHAR](50) NOT NULL,
    flag [NVARCHAR](50) NOT NULL
);
GO

IF OBJECT_ID('products_categories', 'U') IS NOT NULL
DROP TABLE products_categories
GO
CREATE TABLE products_categories
(
    products_categoriesId INT NOT NULL PRIMARY KEY IDENTITY,
    productsId INT NOT NULL,
    categoriesId INT NOT NULL,
    CONSTRAINT FK_ProductsProducts_Categories FOREIGN KEY (productsId)
    REFERENCES products(productsId),
    CONSTRAINT FK_CategoriesProducts_Categories FOREIGN KEY (categoriesId)
    REFERENCES categories(categoriesId)
    
);
GO

SELECT P.productsId, P.name, P.price, P.creationDate
FROM products_categories PC
JOIN products P on PC.productsId = P.productsId
JOIN categories C on PC.categoriesId = C.categoriesId
WHERE C.flag = 'public'
GROUP BY P.productsId, P.name, P.price, P.creationDate
HAVING COUNT(*) > 5
GO

Test 6: Any language (1/20)
Write a program to download the contents of https://www.sap.com/belgique/index.html (the SAP homepage for Belgium), and then save the contents of the page to a new local file, with all occurrences of "SAP" replaced by "Odoo".

// NodeJS

const https = require("https");
const fs = require("fs");
const url = "https://www.sap.com/belgique/index.html";

https.get(url, (res) => {
  let result = "";
  res.on("data", (chunk) => {
    result += chunk;
  });

  res.on("error", (err) => {
    console.log(err);
  });

  res.on("end", () => {
    const newContent = result.replace(/SAP/g, "Odoo");
    fs.writeFile("Odoo.html", newContent, (err) => {
      if (err) return console.log(`Something is wrong : ${err}`);
      console.log("Check this file");
    });
  });
});

Test 7: Any language (2/20)
You have a huge file named "data.bin" that does not fit in memory; code a program that deletes every 7th byte of it. truncate can be used to change its size.

// NodeJS

const fs = require("fs");

function reduceByte(filename) {
  const read = fs.createReadStream(__dirname + "/" + filename, {
    highWaterMark: 7 * 8 * 1024,
  });
  const write = fs.createWriteStream("reduce" + filename);

  read.on("data", (chunk) => {
    const chunkLength = chunk.length;
    console.log(`Length original : ${chunkLength}`);

    let chunkArray = [];

    for (i = 0; i < chunkLength; i += 8) {
      chunkArray.push(chunk.subarray(i, i + 7));
    }

    let reducedChunk = Buffer.concat(chunkArray);
    console.log(reducedChunk.length);
    write.write(reducedChunk);
  });

  read.on("end", (err) => {
    if (err) return console.log(`Error : ${err}`);
    console.log("Finish");
  });
}

reduceByte("./../data.bin");

Test 8: Regular Expression (2/20)
Write a regular expression to match strings containing both "Odoo" and "#rules" in any order.

/(Odoo|#rules)/gm

Test 9: Javascript (1/20)
Write a function that, when called, returns an array for which each element is a letter of the alphabet, from "A" to "Z" (exactly once, in order and upper case). Your code cannot contain the character ' (quote), " (double quote) or ` (back quote)

let a = 65; // ASCII code for the letter A
let b = 90; // ASCII code for the letter B

function getAlphabetArray() {
  const result = [];
  for (i = a; i <= b; i++) {
    result.push(String.fromCharCode(i));
  }
  return result;
}

getAlphabetArray();

Test 10: Unix (1/20)
Write a C program that roughly measures the overhead of a mode switch between the kernel and userspace on a UNIX/Linux system (without using the pthread API). Please indicate the assumptions your rough estimation is based on.

// Don't know how to write a C program
